/*
@styleguide Toggle

### Regular old checkboxes that look and feel like toggle switches

No javascript is required for the **.can-toggle** component. However, including all the right markup is important for it to function properly. The id of the checkbox input must match the "for" attribute of the label, for example.

The **.can-toggle** component was designed to be as accessible as a regular checkbox. It supports both *:focus* and *disabled* states. Once in focus, it can be toggled via the keyboard by pressing SPACE.

#### **Basic usage**

This is the basic .can-toggle component, without any special additions. By default, the component defaults to Canvas colors and branding.

```html
<div class="can-toggle">
  <input id="can-toggle-demo-1" type="checkbox">
  <label for="can-toggle-demo-1">
    <div class="can-toggle__switch" data-checked="On" data-unchecked="Off"></div>
    <div class="can-toggle__label-text">.can-toggle</div>
  </label>
</div>
<div class="can-toggle">
  <input id="can-toggle-demo-8" type="checkbox" disabled>
  <label for="can-toggle-demo-8">
    <div class="can-toggle__switch" data-checked="On" data-unchecked="Off"></div>
    <div class="can-toggle__label-text">.can-toggle [disabled]</div>
  </label>
</div>
```

#### **Go big or go, uh, small**

Adding **.can-toggle--size-large** or **.can-toggle--size-small** to the **.can-toggle** component will give you slightly bigger or small toggles.

```html

<div class="content-box">
  <div class="grid-row middle-xs">
      <div class="col-xs-12 col-md-4">

        <div class="can-toggle can-toggle--size-large">
          <input id="can-toggle-demo-2" type="checkbox" checked>
          <label for="can-toggle-demo-2">
            <div class="can-toggle__switch" data-checked="On" data-unchecked="Off"></div>
            <div class="can-toggle__label-text">I'm a little bigger.</div>
          </label>
        </div>

      </div>
      <div class="col-xs-12 col-md-4">

        <div class="can-toggle">
          <input id="can-toggle-demo-4" type="checkbox" checked>
          <label for="can-toggle-demo-4">
            <div class="can-toggle__switch" data-checked="On" data-unchecked="Off"></div>
            <div class="can-toggle__label-text">I'm the default size.</div>
          </label>
        </div>

      </div>
      <div class="col-xs-12 col-md-4">

        <div class="can-toggle can-toggle--size-small">
          <input id="can-toggle-demo-3" type="checkbox" checked>
          <label for="can-toggle-demo-3">
            <div class="can-toggle__switch" data-checked="On" data-unchecked="Off"></div>
            <div class="can-toggle__label-text">I'm a little smaller.</div>
          </label>
        </div>

      </div>
  </div>
</div>

```

#### **Customizing your toggle switch**

The **.can-toggle** class exposes two mixins for you to use to customize its appearance.

To customize the colors and transition-timing-function, include the **can-toggle-branding** mixin in your new class. Let's call our modifier class **.can-toggle--i-love-ugly-colors**, for example:

<pre>
<code>
  .can-toggle.can-toggle--i-love-ugly-colors {
    @include can-toggle-branding (
      red, // off state color 
      green, // on state color
      white, // inactive text color
      ease-in-out // transition timing function
    )
  }
</code>
</pre>

The SCSS above would give you the toggle below.

```html
<div class="can-toggle can-toggle--i-love-ugly-colors">
  <input id="can-toggle-demo-5" type="checkbox">
  <label for="can-toggle-demo-5">
    <div class="can-toggle__switch" data-checked="On" data-unchecked="Off"></div>
    <div class="can-toggle__label-text">Nice colors, bro.</div>
  </label>
</div>
```

The **can-toggle-appearance** mixin works the same way, giving you control over the toggle's width, height, and a lot more. Simply add a modifier class (in this case **.can-toggle--i-love-big-toggles**) to the **.can-toggle** base class, and include the can-toggle-appearance mixin. Then overwrite the mixin's default variable values until you get the look you're going for.

<pre>
<code>
  .can-toggle.can-toggle--i-love-big-toggles {
    @include can-toggle-appearance
    (
      200px, // Toggle width
      100px,  // Toggle height
      100px,   // Toggle border radius
      2px,   // Offset (distance btw switch and box)
      16px,  // Label font size
      18px,  // Switch font size
      0px 4px 6px rgba(black, 0.4), // Switch shadow on hover/focus
      10px // Bottom padding on main element to make sure switch shadow always shows
    );
  }
</code>
</pre>
The SCSS above would give you the toggle below.

```html
<div class="can-toggle can-toggle--i-love-big-toggles">
  <input id="can-toggle-demo-6" type="checkbox">
  <label for="can-toggle-demo-6">
    <div class="can-toggle__switch" data-checked="On" data-unchecked="Off"></div>
    <div class="can-toggle__label-text">IS THIS TOGGLE BIG ENOUGH??!!</div>
  </label>
</div>
```

*/

@mixin can-toggle-branding (
  $can-toggle-off-color: $canvas-dark, 
  $can-toggle-on-color: $canvas-primary,
  $can-toggle-inactive-text: rgba($canvas-light, 0.5),
  $can-toggle-transition: cubic-bezier(0,1,0.5,1)
) {
  
  input[type="checkbox"] {
    
    &[disabled] ~ label { color: rgba($can-toggle-off-color, 0.5); }
    
    &:focus ~ label, &:hover ~ label {
      .can-toggle__switch {
        background-color: $can-toggle-off-color;
        &:after { color: darken($can-toggle-off-color, 10%); }
      }
    }

    &:hover ~label { color: darken($can-toggle-off-color, 5%); }
    
    &:checked {
      ~ label {
        &:hover { color: darken($can-toggle-on-color, 3%); }
        
        .can-toggle__switch {
          background-color: lighten($can-toggle-on-color, 5%);
          &:after { color: darken($can-toggle-on-color, 5%); }
        }
      }
      
      &:focus, &:hover {
        ~ label {
          .can-toggle__switch {
            background-color: $can-toggle-on-color;
            &:after { color: darken($can-toggle-on-color, 10%); }
          }
        } 
      }

    }
  }
  
  label {
    .can-toggle__label-text { flex: 1; }
    
    .can-toggle__switch {
      transition: background-color 0.3s $can-toggle-transition;
      background: lighten($can-toggle-off-color, 5%);
      &:before { color: $can-toggle-inactive-text; }
      &:after {
        // Autoprefixer choked here, so making the prefixes explicit
        -webkit-transition: -webkit-transform 0.3s $can-toggle-transition;
        transition: transform 0.3s $can-toggle-transition;
        color: $can-toggle-off-color; 
      }
    }
    
  }
}

@mixin can-toggle-appearance ( 
  $can-toggle-width: 134px,
  $can-toggle-height: 36px,
  $can-toggle-border-radius: 4px,
  $can-toggle-offset: 2px,
  $can-toggle-label-font-size: 14px,
  $can-toggle-switch-font-size: 12px,
  $can-toggle-shadow: 0 2px 4px rgba(black, 0.4),
  $can-toggle-bottom-padding: 6px
){
  
  $can-toggle-switch-width: $can-toggle-width/2;
  padding-bottom: $can-toggle-bottom-padding;

  input[type="checkbox"] {

    &:focus ~ label, &:hover ~ label {
      .can-toggle__switch {
        &:after { box-shadow: $can-toggle-shadow; } 
      }
    }
    
    &:checked {
      ~ label {
        .can-toggle__switch {
          &:after { transform: translate3d($can-toggle-width - ($can-toggle-switch-width + $can-toggle-offset),0,0); }  
        }
      }
      &:focus, &:hover {
        ~ label {
          .can-toggle__switch { &:after { box-shadow: $can-toggle-shadow; } }
        } 
      }
    }
  }
  
  label {
    font-size: $can-toggle-label-font-size;
    
    .can-toggle__switch {
      height: $can-toggle-height;
      flex: 0 0 $can-toggle-width;
      border-radius: $can-toggle-border-radius;
      
      &:before {
        left: $can-toggle-width/2;
        font-size: $can-toggle-switch-font-size; 
        line-height: $can-toggle-height;
        width: $can-toggle-width/2;
        padding: 0 12px;
      }
      
      &:after {
        top: $can-toggle-offset; left: $can-toggle-offset;
        border-radius: $can-toggle-border-radius/2;
        width: $can-toggle-switch-width - $can-toggle-offset; 
        line-height: $can-toggle-height - ($can-toggle-offset*2);
        font-size: $can-toggle-switch-font-size;
      }
      
      &:hover {
        &:after { box-shadow: $can-toggle-shadow; }
      }
    } 
  }
}

.can-toggle {
  position: relative;

  *, *:before, *:after { box-sizing: border-box; }
  
  input[type="checkbox"] {
    opacity: 0;
    position: absolute;
    top: 0; left: 0;
    margin: 0; padding: 0;
    
    &[disabled] ~ label {
      pointer-events: none;
      .can-toggle__switch { opacity: 0.4; }
    }
    
    &:checked {
      ~ label {
        .can-toggle__switch {
          
          &:before {
            content: attr(data-unchecked);
            left: 0;
          }
        
          &:after { content: attr(data-checked); }
        }
      }
    }
  }
  
  label {
    user-select: none;
    position: relative;
    display: flex;
    align-items: center;
    margin: 0 !important; 
    padding: 0 !important;
    vertical-align: baseline !important;
    line-height: normal !important;
    
    .can-toggle__label-text { 
      flex: 1;
      padding-left: 32px;
    }
    
    .can-toggle__switch {
      position: relative;
      
      &:before {
        content: attr(data-checked);
        position: absolute;
        top: 0;
        text-transform: uppercase;
        text-align: center;
      }
      
      &:after {
        content: attr(data-unchecked);
        position: absolute;
        z-index: 5;
        text-transform: uppercase;
        text-align: center;
        background: white;
        transform: translate3d(0,0,0);
      }

    }
    
  }
  
  // Call all the mixins to set up the default toggle, using the mixins' defaults
  @include can-toggle-branding;
  @include can-toggle-appearance;

  // Creating variations on the component is simple. 
  // Just add a class below and modify the branding and/or appearance default values
  
  &.can-toggle--size-small {
    @include can-toggle-appearance (
      90px, // Toggle width
      28px,  // Toggle height
      2px,   // Toggle border radius
      1px,   // Offset (distance btw switch and box)
      13px,  // Label font size
      10px,  // Switch font size
      0 1px 2px rgba(black, 0.4), // Switch shadow on hover/focus
      2px // Bottom padding on main element to make sure switch shadow always shows
    ); 
  }
  
  &.can-toggle--size-large {
    @include can-toggle-appearance (
      160px, // Toggle width
      50px,  // Toggle height
      4px,   // Toggle border radius
      2px,   // Offset (distance btw switch and box)
      14px,  // Label font size
      14px,  // Switch font size
      0 4px 4px rgba(black, 0.4), // Switch shadow on hover/focus
      8px // Bottom padding on main element to make sure switch shadow always shows
    ); 
  }

  // Ugly example styles for toggle component demo in styleguide. Put it here because styleguide.scss compiles before this.
  &.can-toggle--i-love-ugly-colors {
    @include can-toggle-branding (
      red,
      green,
      white,
      ease-in-out
    )
  }

  &.can-toggle--i-love-big-toggles {
    @include can-toggle-appearance (
      200px, // Toggle width
      100px,  // Toggle height
      100px,   // Toggle border radius
      2px,   // Offset (distance btw switch and box)
      16px,  // Label font size
      18px,  // Switch font size
      0px 4px 6px rgba(black, 0.4), // Switch shadow on hover/focus
      10px // Bottom padding on main element to make sure switch shadow always shows
    );
  }
  // End styleguide demo styles

}